package com.skillstorm.library_spring_boot.services;

import java.util.Arrays;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

import org.springframework.stereotype.Service;

import com.skillstorm.library_spring_boot.models.Books;
import com.skillstorm.library_spring_boot.models.Library;
import com.skillstorm.library_spring_boot.repositories.BooksRepository;
import com.skillstorm.library_spring_boot.repositories.LibraryRepository;

import jakarta.transaction.Transactional;

@Service
public class LibraryService {
    
    private LibraryRepository libRepo;

    private BooksRepository booksRepo;

    // Use dependency injection into get an instance of the LibraryRepository
    public LibraryService(LibraryRepository libRepo, BooksRepository booksRepo) {
        this.libRepo = libRepo;
        this.booksRepo = booksRepo;
    }

    public Iterable<Library> findAll() {
        return libRepo.findAll();
    }

    public Optional<Library> findById(int id) {
        return libRepo.findById(id);
    }

    @Transactional
    public Library save(Library library) {
        Books books = (Books) library.getBooks();
        if (booksRepo.existsById(books.getBarcode())) {
            List<Books> booksList = Arrays.asList(books);
            if (booksList != null && !booksList.isEmpty()) {
                library.setBooks(booksList);
            //Books existingBooks = booksRepo.findById(books.getBarcode()).get();
            //library.setBooks(Arrays.asList(existingBooks));
        }}
        return libRepo.save(library);
    }
    

    public void update (int id, Library library) {
        if (!libRepo.existsById(id))
            throw new NoSuchElementException("Library with id " + id + " does not exist");
        library.setId(id);
        libRepo.save(library);
    }
    
    public void deleteById (int id) {
        libRepo.deleteById(id);
    }











// Code generated by AI to help create relationships
// commenting out for now


// public Library updateLibrary(int id, Library library) {
//     try {
//         // Update the library
//         Library existingLibrary = (Library) Optional.ofNullable(libRepo.findById(id)).orElseThrow();
//         existingLibrary.setName(library.getName());
//         existingLibrary.setStreet(library.getStreet());
        
//         // Update books for the library
//         for (Books books : library.getBooks()) {
//             books.setLibrary(existingLibrary);
//             booksService.update(books.getBarcode(), books);
//         }
        
//         return libRepo.save(existingLibrary);
//     } catch (NoSuchElementException e) {
//         throw new LibraryNotFoundException("Library not found with id: " + id);
//     }
// }
    
// @SuppressWarnings("unchecked")
// public List<Library> getLibraryWithBooks(int id) {
//     try {
//         // Retrieve the library
//         Library library = (Library) Optional.ofNullable(libRepo.findById(id)).orElseThrow();
        
//         // Retrieve books for the library
//         List<Books> books = booksService.getBooksByLibraryId(id);
//         library.setBooks(books);
        
//         return (List<Library>) library;
//     } catch (NoSuchElementException e) {
//         throw new LibraryNotFoundException("Library not found with id: " + id);
//     }
// }

// public List<Library> getAllLibraries() {
//     // TODO Auto-generated method stub
//     throw new UnsupportedOperationException("Unimplemented method 'getAllLibraries'");
// }

// public void deleteLibrary(int id) {
//     // TODO Auto-generated method stub
//     throw new UnsupportedOperationException("Unimplemented method 'deleteLibrary'");
// }

// public Optional<Library> getLibraryById(int id) {
//     // TODO Auto-generated method stub
//     throw new UnsupportedOperationException("Unimplemented method 'getLibraryById'");
// }


}
